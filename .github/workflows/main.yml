name: ðŸ”Ž CI Checks

on:
  push:
    branches:
      - '**'
      - '!main'
  pull_request:
    branches:
      - main

jobs:
  quality_checks:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Check Environment Variables
        run: |
          echo "Checking secrets..."

          # Define a function to check each secret
          check_secret() {
            if [ -z "${!1}" ]; then
              echo "$1 is missing!"
            else
              echo "$1 is set."
            fi
          }

          # List of secrets to check
          secrets=(
            "IMAGEKIT_PUBLIC_KEY"
            "IMAGEKIT_PRIVATE_KEY"
            "IMAGEKIT_URL_ENDPOINT"
            "CODECOV_TOKEN"
            "SESSION_SECRET"
            "JWT_SECRET"
            "JWT_EXPIRED"
            "DATABASE_URL"
          )

          # Check each secret
          for secret in "${secrets[@]}"; do
            check_secret "$secret"
          done

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Linter
        run: npm run lint

      - name: Tests
        run: npm run test
        env:
          CI: true
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          IMAGEKIT_PRIVATE_KEY: ${{ secrets.IMAGEKIT_PRIVATE_KEY }}
          IMAGEKIT_PUBLIC_KEY: ${{ secrets.IMAGEKIT_PUBLIC_KEY }}
          IMAGEKIT_URL_ENDPOINT: ${{ secrets.IMAGEKIT_URL_ENDPOINT }}
          JWT_EXPIRED: ${{ secrets.JWT_EXPIRED }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
